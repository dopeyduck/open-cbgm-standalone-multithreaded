name: package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        os: [windows-latest]
        c_compiler: [cl]
        cpp_compiler: [cl]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_TESTS=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
    - name: Package executables
      # Place all the executables into a .zip archive
      run: |
        cd build/bin/Release
        Compress-Archive -Path *.exe -Destination open-cbgm-standalone-windows.zip
    - name: Upload executables
      # Upload the archive as an artifact
      uses: actions/upload-artifact@v4
      with:
        path: build/bin/Release/open-cbgm-standalone-windows.zip

  mac-build:
    runs-on: macos-latest
    strategy:
      matrix:
        os: [macos-latest]
        c_compiler: [clang]
        cpp_compiler: [clang++]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_TESTS=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
    - name: Package executables
      # Place all the executables into a .zip archive
      run: |
        cd build/bin
        tar -cvzf open-cbgm-standalone-mac.tar.gz *
    - name: Upload executables
      # Upload the archive as an artifact
      uses: actions/upload-artifact@v4
      with:
        path: build/bin/open-cbgm-standalone-mac.tar.gz

  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        c_compiler: [gcc]
        cpp_compiler: [g++]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_TESTS=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
    - name: Package executables
      # Place all the executables into a .zip archive
      run: |
        cd build/bin
        tar -cvzf open-cbgm-standalone-linux.tar.gz *
    - name: Upload executables
      # Upload the archive as an artifact
      uses: actions/upload-artifact@v4
      with:
        path: build/bin/open-cbgm-standalone-linux.tar.gz